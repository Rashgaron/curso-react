{"ast":null,"code":"import { AGREGAR_PRODUCTO, AGREGAR_PRODUCTO_ERROR, AGREGAR_PRODUCTO_EXITO, COMENZAR_DESCARGA_PRODUCTOS, DESCARGA_PRODUCTOS_EXITO, DESCARGA_PRODUCTOS_ERROR } from '../types';\nimport clienteAxios from '../config/axios';\nimport Swal from 'sweetalert2'; // Crear nuevos productos\n\nexport function crearNuevoProductoAction(producto) {\n  return async dispatch => {\n    dispatch(agregarProducto());\n\n    try {\n      // insertar en la api\n      await clienteAxios.post('/productos', producto); // Si todo sale bindActionCreators, actualiza el state\n\n      dispatch(agregarProductoExito(producto)); // Alerta\n\n      Swal.fire('Correcto', 'El producto se agregó correctamente', 'success');\n    } catch (error) {\n      // Si hay un error, cambiar el state\n      dispatch(agregarProductoError(true));\n      Swal.fire({\n        icon: 'error',\n        title: 'Hubo un error',\n        text: 'Hubo un error, intenta de nuevo'\n      });\n    }\n  };\n}\n\nconst agregarProducto = () => ({\n  type: AGREGAR_PRODUCTO,\n  payload: true\n}); // Si el producto se guarda en base de datos\n\n\nconst agregarProductoExito = producto => ({\n  type: AGREGAR_PRODUCTO_EXITO,\n  payload: producto\n}); // Si hubo un error\n\n\nconst agregarProductoError = estado => ({\n  type: AGREGAR_PRODUCTO_ERROR,\n  payload: estado\n}); // Funcion que descarga los productos de bd\n\n\nexport function obtenerProductosAction() {\n  return async dispatch => {\n    dispatch(descargarProductos());\n\n    try {\n      const respuesta = await clienteAxios.get('/pdroductos');\n      dispatch(descargaProductosExitosa(respuesta.data));\n    } catch (error) {\n      console.log(error);\n      dispatch(descargaProductosError());\n    }\n  };\n}\n\nconst descargarProductos = () => ({\n  type: COMENZAR_DESCARGA_PRODUCTOS,\n  payload: true\n});\n\nconst descargaProductosExitosa = productos => ({\n  type: DESCARGA_PRODUCTOS_EXITO,\n  payload: productos\n});\n\nconst descargaProductosError = () => ({\n  type: DESCARGA_PRODUCTOS_ERROR,\n  payload: true\n});","map":{"version":3,"sources":["C:/Users/bcn/Documents/curso-react/crud-redux/src/actions/productoActions.js"],"names":["AGREGAR_PRODUCTO","AGREGAR_PRODUCTO_ERROR","AGREGAR_PRODUCTO_EXITO","COMENZAR_DESCARGA_PRODUCTOS","DESCARGA_PRODUCTOS_EXITO","DESCARGA_PRODUCTOS_ERROR","clienteAxios","Swal","crearNuevoProductoAction","producto","dispatch","agregarProducto","post","agregarProductoExito","fire","error","agregarProductoError","icon","title","text","type","payload","estado","obtenerProductosAction","descargarProductos","respuesta","get","descargaProductosExitosa","data","console","log","descargaProductosError","productos"],"mappings":"AAAA,SACCA,gBADD,EAECC,sBAFD,EAGCC,sBAHD,EAICC,2BAJD,EAKCC,wBALD,EAMCC,wBAND,QAOO,UAPP;AAQA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;;AAEA,OAAO,SAASC,wBAAT,CAAkCC,QAAlC,EAA4C;AAClD,SAAO,MAAOC,QAAP,IAAoB;AAC1BA,IAAAA,QAAQ,CAACC,eAAe,EAAhB,CAAR;;AACA,QAAI;AACH;AACA,YAAML,YAAY,CAACM,IAAb,CAAkB,YAAlB,EAAgCH,QAAhC,CAAN,CAFG,CAGH;;AACAC,MAAAA,QAAQ,CAACG,oBAAoB,CAACJ,QAAD,CAArB,CAAR,CAJG,CAKH;;AACAF,MAAAA,IAAI,CAACO,IAAL,CAAU,UAAV,EAAsB,qCAAtB,EAA6D,SAA7D;AACA,KAPD,CAOE,OAAOC,KAAP,EAAc;AACf;AACAL,MAAAA,QAAQ,CAACM,oBAAoB,CAAC,IAAD,CAArB,CAAR;AACAT,MAAAA,IAAI,CAACO,IAAL,CAAU;AACTG,QAAAA,IAAI,EAAE,OADG;AAETC,QAAAA,KAAK,EAAE,eAFE;AAGTC,QAAAA,IAAI,EAAE;AAHG,OAAV;AAKA;AACD,GAlBD;AAmBA;;AAED,MAAMR,eAAe,GAAG,OAAO;AAC9BS,EAAAA,IAAI,EAAEpB,gBADwB;AAE9BqB,EAAAA,OAAO,EAAE;AAFqB,CAAP,CAAxB,C,CAKA;;;AAEA,MAAMR,oBAAoB,GAAIJ,QAAD,KAAe;AAC3CW,EAAAA,IAAI,EAAElB,sBADqC;AAE3CmB,EAAAA,OAAO,EAAEZ;AAFkC,CAAf,CAA7B,C,CAKA;;;AAEA,MAAMO,oBAAoB,GAAIM,MAAD,KAAa;AACzCF,EAAAA,IAAI,EAAEnB,sBADmC;AAEzCoB,EAAAA,OAAO,EAAEC;AAFgC,CAAb,CAA7B,C,CAKA;;;AAEA,OAAO,SAASC,sBAAT,GAAkC;AACxC,SAAO,MAAOb,QAAP,IAAoB;AAC1BA,IAAAA,QAAQ,CAACc,kBAAkB,EAAnB,CAAR;;AAEA,QAAI;AACH,YAAMC,SAAS,GAAG,MAAMnB,YAAY,CAACoB,GAAb,CAAiB,aAAjB,CAAxB;AACAhB,MAAAA,QAAQ,CAACiB,wBAAwB,CAACF,SAAS,CAACG,IAAX,CAAzB,CAAR;AACA,KAHD,CAGE,OAAOb,KAAP,EAAc;AACfc,MAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AAEAL,MAAAA,QAAQ,CAACqB,sBAAsB,EAAvB,CAAR;AACA;AACD,GAXD;AAYA;;AAED,MAAMP,kBAAkB,GAAG,OAAO;AACjCJ,EAAAA,IAAI,EAAEjB,2BAD2B;AAEjCkB,EAAAA,OAAO,EAAE;AAFwB,CAAP,CAA3B;;AAKA,MAAMM,wBAAwB,GAAIK,SAAD,KAAgB;AAChDZ,EAAAA,IAAI,EAAEhB,wBAD0C;AAEhDiB,EAAAA,OAAO,EAAEW;AAFuC,CAAhB,CAAjC;;AAMA,MAAMD,sBAAsB,GAAG,OAAK;AACnCX,EAAAA,IAAI,EAACf,wBAD8B;AAEnCgB,EAAAA,OAAO,EAAC;AAF2B,CAAL,CAA/B","sourcesContent":["import {\r\n\tAGREGAR_PRODUCTO,\r\n\tAGREGAR_PRODUCTO_ERROR,\r\n\tAGREGAR_PRODUCTO_EXITO,\r\n\tCOMENZAR_DESCARGA_PRODUCTOS,\r\n\tDESCARGA_PRODUCTOS_EXITO,\r\n\tDESCARGA_PRODUCTOS_ERROR\r\n} from '../types';\r\nimport clienteAxios from '../config/axios';\r\nimport Swal from 'sweetalert2';\r\n\r\n// Crear nuevos productos\r\n\r\nexport function crearNuevoProductoAction(producto) {\r\n\treturn async (dispatch) => {\r\n\t\tdispatch(agregarProducto());\r\n\t\ttry {\r\n\t\t\t// insertar en la api\r\n\t\t\tawait clienteAxios.post('/productos', producto);\r\n\t\t\t// Si todo sale bindActionCreators, actualiza el state\r\n\t\t\tdispatch(agregarProductoExito(producto));\r\n\t\t\t// Alerta\r\n\t\t\tSwal.fire('Correcto', 'El producto se agregó correctamente', 'success');\r\n\t\t} catch (error) {\r\n\t\t\t// Si hay un error, cambiar el state\r\n\t\t\tdispatch(agregarProductoError(true));\r\n\t\t\tSwal.fire({\r\n\t\t\t\ticon: 'error',\r\n\t\t\t\ttitle: 'Hubo un error',\r\n\t\t\t\ttext: 'Hubo un error, intenta de nuevo'\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}\r\n\r\nconst agregarProducto = () => ({\r\n\ttype: AGREGAR_PRODUCTO,\r\n\tpayload: true\r\n});\r\n\r\n// Si el producto se guarda en base de datos\r\n\r\nconst agregarProductoExito = (producto) => ({\r\n\ttype: AGREGAR_PRODUCTO_EXITO,\r\n\tpayload: producto\r\n});\r\n\r\n// Si hubo un error\r\n\r\nconst agregarProductoError = (estado) => ({\r\n\ttype: AGREGAR_PRODUCTO_ERROR,\r\n\tpayload: estado\r\n});\r\n\r\n// Funcion que descarga los productos de bd\r\n\r\nexport function obtenerProductosAction() {\r\n\treturn async (dispatch) => {\r\n\t\tdispatch(descargarProductos());\r\n\r\n\t\ttry {\r\n\t\t\tconst respuesta = await clienteAxios.get('/pdroductos');\r\n\t\t\tdispatch(descargaProductosExitosa(respuesta.data));\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\r\n\t\t\tdispatch(descargaProductosError())\r\n\t\t}\r\n\t};\r\n}\r\n\r\nconst descargarProductos = () => ({\r\n\ttype: COMENZAR_DESCARGA_PRODUCTOS,\r\n\tpayload: true\r\n});\r\n\r\nconst descargaProductosExitosa = (productos) => ({\r\n\ttype: DESCARGA_PRODUCTOS_EXITO,\r\n\tpayload: productos\r\n});\r\n\r\n\r\nconst descargaProductosError = ()=>({\r\n\ttype:DESCARGA_PRODUCTOS_ERROR,\r\n\tpayload:true\r\n})"]},"metadata":{},"sourceType":"module"}